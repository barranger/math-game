{"version":3,"sources":["components/User.js","App.js","reportWebVitals.js","index.js","components/Question.js"],"names":["User","initial","save","inputRef","useRef","className","onSubmit","current","value","placeholder","ref","type","App","useState","localStorage","getItem","user","setUser","score","setScore","console","log","Question","onCorrect","onClick","clear","u","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","question","setQuestion","feedbackRef","operations","loadQuestion","q","left","Math","round","random","right","operation","answer","eval","handleAnswer","e","preventDefault","innerText","classList","remove","setTimeout","add","onBlur","focus","autoFocus"],"mappings":"mMAgBeA,G,KAbF,SAAC,GAAoB,EAAnBC,QAAoB,IAAXC,EAAU,EAAVA,KAChBC,EAAWC,mBACjB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAASA,UAAU,OAAnB,SACE,uBAAMC,SAAU,kBAAMJ,EAAKC,EAASI,QAAQC,QAA5C,UACF,uBAAOC,YAAY,kBAAkBC,IAAKP,IAC1C,wBAAQQ,KAAK,SAAb,6B,OC+BSC,EApCH,WAAO,IAAD,EACQC,mBAASC,aAAaC,QAAQ,cADtC,mBACTC,EADS,KACHC,EADG,OAEUJ,mBAAS,GAFnB,mBAETK,EAFS,KAEFC,EAFE,KAIhB,OAAIH,GAMJI,QAAQC,IAAI,oBAAsBL,GAEhC,sBAAKX,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,4CAAaW,OAGf,yBAASX,UAAU,QAAnB,SACI,sDAAuBa,OAE3B,yBAASb,UAAU,WAAnB,SACE,cAACiB,EAAA,EAAD,CAAUC,UAAW,kBAAMJ,EAAUD,EAAQ,QAG/C,yBAASb,UAAU,UAAnB,SACE,qBAAKmB,QAAS,WACZV,aAAaW,QACbR,EAAQ,OAFV,SAIE,mDAxBC,cAAC,EAAD,CAAMhB,QAASe,EAAMd,KAAM,SAACwB,GACjCT,EAAQS,GACRZ,aAAaa,QAAQ,YAAaD,OCAzBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,4lBCdMN,SAAW,SAAXA,SAAY,MAAiB,IAAhBC,UAAe,KAAfA,UAAe,UACAV,oDAAS,MADT,qKACzB6B,SADyB,cACfC,YADe,cAE1BxC,SAAWC,oDACXwC,YAAcxC,oDACdyC,WAAa,CAAE,IAAK,IAAK,IAAK,KAG9BC,aAAe,SAAfA,eACJ,IAAMC,EAAI,CACRC,KAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,UACtBC,MAAOH,KAAKC,MAAsB,EAAhBD,KAAKE,UACvBE,UAAWR,WAAWI,KAAKC,MAAsB,EAAhBD,KAAKE,YAIxCJ,EAAEO,OAASC,KAAK,GAAD,OAAIR,EAAEC,MAAN,OAAaD,EAAEM,WAAf,OAA2BN,EAAEK,QAE5ChC,QAAQC,IAAI0B,GACZJ,YAAYI,IAGd,IAAIL,SAEF,OADAI,eACO,0FAGT,IAAMU,aAAe,SAACC,GACpBA,EAAEC,iBAEavD,SAASI,QAAQC,QAEvB,UAAQkC,SAASY,SACxBV,YAAYrC,QAAQoD,UAAY,UAChCpC,aAEAqB,YAAYrC,QAAQoD,UAAY,QAGlCf,YAAYrC,QAAQqD,UAAUC,OAAO,UACrCC,YAAW,WACTlB,YAAYrC,QAAQqD,UAAUG,IAAI,YACjC,KACH5D,SAASI,QAAQC,MAAQ,GACzBmC,YAAY,OAId,OACE,oEAAMrC,SAAUkD,aAAhB,UACE,mEAAKnD,UAAU,WAAf,UACE,4EAAOqC,SAASM,OAChB,4EAAON,SAASW,YAChB,4EAAOX,SAASU,QAChB,kFACA,4EACE,oEACE1C,IAAKP,SACL6D,OAAQ,kBAAM7D,SAASI,QAAQ0D,SAC/BC,WAAS,SAIf,iEAAI7D,UAAU,SAASK,IAAKkC,YAA5B,yBAKStB,iC","file":"static/js/main.68b59bfb.chunk.js","sourcesContent":["import '../App.css';\nimport React, { useRef } from 'react';\n\nconst User = ({initial, save}) => {\n  const inputRef = useRef();\n  return (\n    <div className=\"App\">\n      <section className=\"user\">\n        <form onSubmit={() => save(inputRef.current.value)}>\n      <input placeholder=\"Enter your name\" ref={inputRef}></input>\n      <button type=\"submit\">Submit</button>\n      </form>\n    </section>\n    </div>);\n};\n\nexport default User;","import './App.css';\nimport { useState } from 'react';\nimport User from './components/User';\nimport Question from './components/Question';\n\nconst App = () => {\n  const [user, setUser] = useState(localStorage.getItem('math-name'));\n  const [score, setScore] = useState(0);\n\n  if(!user) {\n    return <User initial={user} save={(u) => {\n      setUser(u);\n      localStorage.setItem('math-name', u);\n    }} />\n  }\n  console.log('about to display ' + user);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{`Hello ${user}`}</p>\n        \n      </header>\n      <section className=\"score\">\n          <p>{`you're score is ${score}`}</p>\n        </section>\n      <section className=\"question\">\n        <Question onCorrect={() => setScore( score + 1)} />\n      </section>\n     \n      <section className=\"goodbye\">\n        <div onClick={() => {\n          localStorage.clear();\n          setUser(null);\n        }}>\n          <p>Good Bye!!</p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useRef, useState } from 'react';\n\nconst Question = ({onCorrect}) => {\n  const [question, setQuestion] = useState(null);\n  const inputRef = useRef();\n  const feedbackRef = useRef();\n  const operations = [ '+', '-', '/', '*'];\n\n\n  const loadQuestion = () => {   \n    const q = {\n      left: Math.round(Math.random() * 9),\n      right: Math.round(Math.random() * 9),\n      operation: operations[Math.round(Math.random() * 3)],\n    };\n\n    // eslint-disable-next-line no-eval\n    q.answer = eval(`${q.left}${q.operation}${q.right}`);\n\n    console.log(q);\n    setQuestion(q);\n  }\n\n  if(!question) {\n    loadQuestion();\n    return <p>Loading.....</p>;\n  }\n\n  const handleAnswer = (e) => {\n    e.preventDefault(); \n\n    const answer = inputRef.current.value;\n\n    if(answer === `${question.answer}`) {\n      feedbackRef.current.innerText = \"correct\";\n      onCorrect();\n    } else {\n      feedbackRef.current.innerText = \"Wrong\";\n    }\n\n    feedbackRef.current.classList.remove('hidden');\n    setTimeout(() => {\n      feedbackRef.current.classList.add('hidden');\n    }, 1000)\n    inputRef.current.value = '';\n    setQuestion(null);\n\n  }\n\n  return (\n    <form onSubmit={handleAnswer}>\n      <div className=\"question\">\n        <span>{question.left}</span>\n        <span>{question.operation}</span>\n        <span>{question.right}</span>\n        <span>=</span>\n        <span>\n          <input \n            ref={inputRef}\n            onBlur={() => inputRef.current.focus()} \n            autoFocus\n          />\n        </span>\n      </div>\n      <h3 className=\"hidden\" ref={feedbackRef}>Correct</h3>\n    </form>\n  );\n};\n\nexport default Question;"],"sourceRoot":""}